{"version":3,"sources":["components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Statistics/Statistics.module.css","components/Notification/Notofocation.module.css","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/data/data.js","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","title","children","className","style","section","FeedbackOption","options","onLeaveFeedback","map","option","button","type","onClick","FeedbackBtn","propTypes","PropTypes","arrayOf","string","func","isRequired","Data","Notification","message","Statistics","good","neutral","bad","total","positiveFeedback","list","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Math","round","countPositiveFeedback","FeedbackOptions","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gJACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,iBCA7DD,EAAOC,QAAU,CAAC,OAAS,kC,gBCA3BD,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,2B,gBCAzDD,EAAOC,QAAU,CAAC,QAAU,gC,uICgBbC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASC,UAAWC,IAAMC,QAA1B,UACE,oBAAIF,UAAWC,IAAMH,MAArB,SAA6BA,IAC5BC,M,gCCWP,SAASI,EAAT,GAAuD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OAfP,SAAC,GAAiC,IAA/BA,EAA8B,EAA9BA,OAAQF,EAAsB,EAAtBA,gBAC7B,OACE,wBACEL,UAAWC,IAAMO,OACjBC,KAAK,SACLC,QAAS,kBAAML,EAAgBE,IAHjC,SAMGA,GAFIA,GASoBI,CAAY,CAAEJ,SAAQF,uBAGrDF,EAAeS,UAAY,CACzBR,QAASS,IAAUC,QAAQD,IAAUE,QACrCV,gBAAiBQ,IAAUG,KAAKC,YAGnBd,QC3BFe,EAAO,CAAC,OAAQ,UAAW,O,gCCWzBC,EARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,mBAAGpB,UAAWC,IAAMmB,QAApB,SAA8BA,KCyBjBC,EAzBI,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,iBAC/C,OACE,qCAEGD,EAAQ,GACP,qBAAIzB,UAAWC,IAAM0B,KAArB,UACE,wCAAWL,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,WAGO,IAAVD,GAAe,cAAC,EAAD,CAAcL,QAAQ,uBCyC7BQ,MAnDf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNP,EADM,KACAQ,EADA,OAEiBD,mBAAS,GAF1B,mBAENN,EAFM,KAEGQ,EAFH,OAGSF,mBAAS,GAHlB,mBAGNL,EAHM,KAGDQ,EAHC,KAqBPC,EAAqB,WACzB,OAAOX,EAAOC,EAAUC,GAQpBC,EAAQQ,IACRP,EANwB,WAC5B,IAAMD,EAAQQ,IACd,OAAOR,EAAQS,KAAKC,MAAOb,EAAOG,EAAS,KAAO,EAI3BW,GAEzB,OACE,gCACE,cAAC,EAAD,CAAStC,MAAM,wBAAf,SACE,cAACuC,EAAD,CAAiBjC,QAASc,EAAMb,gBA/Bf,SAAAE,GACrB,OAAQA,GACN,IAAK,OACHuB,GAAQ,SAAAQ,GAAK,OAAIA,EAAQ,KACzB,MACF,IAAK,UACHP,GAAW,SAAAO,GAAK,OAAIA,EAAQ,KAC5B,MACF,IAAK,MACHN,GAAO,SAAAM,GAAK,OAAIA,EAAQ,KACxB,MACF,QACE,aAqBF,cAAC,EAAD,CAASxC,MAAM,aAAf,SACE,cAAC,EAAD,CACEwB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,iBAAkBA,UCvCba,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e1415782.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1XThT\",\"title\":\"Section_title__16Mbq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__w79og\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__ANcbD\",\"item\":\"Statistics_item__22Oc7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notofocation_message__3wnSQ\"};","import PropTypes from 'prop-types'; \r\nimport style from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className={style.section}>\r\n      <h1 className={style.title}>{title}</h1>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n\r\n","import PropTypes from 'prop-types'; \r\nimport style from './FeedbackOptions.module.css';\r\n\r\n\r\nconst FeedbackBtn = ({ option, onLeaveFeedback }) => {\r\n  return (\r\n    <button\r\n      className={style.button}\r\n      type=\"button\"\r\n      onClick={() => onLeaveFeedback(option)} \r\n      key={option}\r\n    >\r\n      {option}\r\n    </button>\r\n  );\r\n};\r\n\r\n\r\nfunction FeedbackOption({ options, onLeaveFeedback }) {\r\n  return options.map(option => FeedbackBtn({ option, onLeaveFeedback })); \r\n};\r\n\r\nFeedbackOption.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOption;\r\n","export const Data = ['good', 'neutral', 'bad'];\r\n","import PropTypes from 'prop-types';\r\nimport style from './Notofocation.module.css';\r\n\r\nconst Notification = ({ message }) => (\r\n  <p className={style.message}>{message}</p>\r\n);\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import PropTypes from 'prop-types';\r\nimport style from './Statistics.module.css';\r\nimport Notification from '../Notification/Notification';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positiveFeedback }) => {\r\n  return (\r\n    <>\r\n      {/* Проверяем чтобы было какое-то значение, в противном случае выводим нотификацию */}\r\n      {total > 0 && (\r\n        <ul className={style.list}>\r\n          <li>Good: {good}</li>\r\n          <li>Neutral: {neutral}</li>\r\n          <li>Bad: {bad}</li>\r\n          <li>Total: {total}</li>\r\n          <li>Positive Feedback: {positiveFeedback} %</li>\r\n        </ul>\r\n      )}\r\n      {total === 0 && <Notification message=\"No reviews yet\" />}\r\n    </>\r\n  );\r\n};\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positiveFeedback: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","//import React, { Component } from 'react'; // для хуков не нужен\nimport { useState } from 'react'; // Импортируем useState\nimport Section from './components/Section/Section.jsx';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions.jsx';\nimport { Data } from './components/data/data';\nimport Statistics from './components/Statistics/Statistics.jsx';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(state => state + 1);\n        break;\n      case 'neutral':\n        setNeutral(state => state + 1);\n        break;\n      case 'bad':\n        setBad(state => state + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedback = () => {\n    const total = countTotalFeedback(); \n    return total ? Math.round((good / total) * 100) : 0; // находим общее кол-во good, если таких нет - выводим ноль.\n  };\n\n  const total = countTotalFeedback(); \n  const positiveFeedback = countPositiveFeedback(); \n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={Data} onLeaveFeedback={handleFeedback} />\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          positiveFeedback={positiveFeedback}\n        />\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}